name: "Troubleshoot Terraform"
description: "Reusable action to troubleshoot terraform errors"

inputs:
  system_prompt:
    description: "System prompt to use"
    required: false
    default: |
      You are an expert DevOps engineer and Terraform specialist with 10+ years of experience troubleshooting infrastructure-as-code issues. You excel at diagnosing Terraform errors, providing actionable solutions, and explaining complex concepts clearly.

      **ROLE & RESPONSIBILITIES:**
      - Analyze Terraform plan/output errors and provide specific solutions
      - Identify common Terraform pitfalls (state mismatches, provider issues, syntax errors)
      - Suggest best practices and optimization tips
      - Explain error messages in simple terms with step-by-step fixes
      - Consider AWS/GCP/Azure specific issues when relevant
      - Highlight security concerns and compliance issues
      - Provide code examples when appropriate

      **TROUBLESHOOTING FRAMEWORK:**
      1. **IDENTIFY**: Pinpoint the exact error type and location
      2. **ANALYZE**: Determine root cause (syntax, state, provider, permissions)
      3. **RESOLVE**: Provide specific commands and code fixes
      4. **PREVENT**: Suggest best practices to avoid recurrence

  working_directory:
    description: "Working Directory"
    required: true
  rendered_plan_file:
    description: "Rendered human-readable plan filename" 
    required: false
    default: "tfplan-rendered-${{ github.run_id }}"
  model:
    description: "AI model to use"
    required: false
    default: "openai/gpt-4o-mini"           # mistral-ai/ministral-3b, 
  max_tokens:
    description: "Maximum tokens for response"
    required: false
    default: "1000"

outputs:
  response:
    description: "AI response content"
    value: ${{ steps.troubleshoot.outputs.response }}

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Download Rendered Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.rendered_plan_file }}
        path: ${{ inputs.working_directory }}

    - name: Read Rendered Plan File
      id: read_plan
      shell: bash
      run: |
        PLAN_PATH="${{ inputs.working_directory }}/${{ inputs.rendered_plan_file }}"
        if [[ -f "$PLAN_PATH" ]]; then
          # Escape newlines for GitHub output
          CONTENT=$(cat "$PLAN_PATH" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "plan_content=$CONTENT" >> $GITHUB_OUTPUT
        else
          echo "plan_content=No plan file found at $PLAN_PATH" >> $GITHUB_OUTPUT
        fi
        
    - name: Troubleshoot Terraform
      uses: op5dev/prompt-ai@v2
      with:
        model: ${{ inputs.model }}
        system-prompt: ${{ inputs.system_prompt }}
        max-tokens: ${{ inputs.max_tokens }}
        user-prompt: |
          Please analyze the following Terraform output and provide troubleshooting guidance:

          **Working Directory**: ${{ inputs.working_directory }}

          **Terraform Output**: ${{ steps.read_plan.outputs.plan_content }}

          Please provide:
          1. Error severity assessment
          2. Root cause analysis  
          3. Specific fix commands
          4. Prevention tips

    - name: Debug outputs
      shell: bash
      run: |
        echo "Response File: ${{ steps.troubleshoot.outputs.response-file }}"
        echo "Response Response: ${{ steps.troubleshoot.outputs.response }}"

    - name: Get Module Name
      uses: SeamlessOps/waas/workflow-templates/infrastructure/terraform/shared/utils/get-module-name@main
      with:
        working_directory: ${{ inputs.working_directory }}

    - name: Post AI Response to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const moduleName = process.env.MODULE_NAME;
          console.log("Module Name:", moduleName);
          const aiResponse = `${{ steps.troubleshoot.outputs.response }}`;
          
          if (aiResponse && aiResponse.trim() !== '') {
            // Truncate if too long (GitHub comment limit is ~65k chars)
            const maxLength = 60000;
            const truncatedResponse = aiResponse.length > maxLength 
              ? aiResponse.substring(0, maxLength) + '\n\n... (response truncated due to length)'
              : aiResponse;
              
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”§ Terraform Troubleshooting Analysis\n\n ### Module: ${moduleName}\n\n${truncatedResponse}`
            });
          } else {
            console.log('AI response was empty');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ðŸ”§ Terraform Troubleshooting\n\n ### Module: ${moduleName}\n\nAI analysis completed. No specific issues identified or response was empty.'
            });
          }