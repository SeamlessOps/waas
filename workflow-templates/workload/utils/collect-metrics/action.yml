name: 'Collect Deployment Metrics'
description: 'Collects deployment metrics and sends to dashboard API'
inputs:
  backend_services:
    description: 'List of Backend services'
    required: false
    default: '["ondgo"]'
  frontend_services:
    description: 'List of Frontend services'
    required: false
    default: '["ondgo-frontend"]'
  metrics_dir:
    description: 'Metrics Directory'
    required: false
    default: 'waas-metrics'
  metrics_script:
    description: 'Metrics Script'
    required: false
    default: 'scripts/update_metrics.py'
  metrics_file:
    description: 'Metrics file path'
    required: false
    default: 'data/deployments.json'
  python_version:
    description: 'Python Version'
    required: false
    default: '3.13'
  environment:
    description: 'Deployment environment'
    required: true
  service:
    description: 'Deployed service'
    required: true
  status:
    description: 'Deployment status'
    required: true
  duration:
    description: 'Deployment duration'
    required: false
    default: '0'
  commit_author:
    description: 'Commit author'
    required: false
    default: '${{ github.actor }}'
  commit_message:
    description: 'Commit message'
    required: false
    default: '${{ github.event.head_commit.message }}'
  waas_api_url:
    description: 'WaaS API URL'
    required: false
  waas_api_key:
    description: 'WaaS API Key'
    required: false
  git_token:
    description: 'GitHub token for pushing changes'
    required: true
  gitops_repo:
    description: 'GitOps repository URL'
    required: false
    default: 'SeamlessOps/products.git'
  git_ref:
    description: 'The GitOps branch to use'
    required: false
    default: 'main'
  git_update_max_retries:
    description: 'Maximum retries for updating GitOps repository'
    required: false
    default: '5'
  git_user_name:
    description: 'GitHub username for pushing changes'
    required: false
    default: "github-actions[bot]"
  git_user_email:
    description: 'GitHub user email for pushing changes'
    required: false
    default: "41898282+github-actions[bot]@users.noreply.github.com"
  image_tag:
    description: 'New image tag to build and publish'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Determine Service Type
      id: service-type
      shell: bash
      run: |
        set -e

        REPO_NAME="${{ github.event.repository.name }}"
        BACKEND_SERVICES_JSON='${{ inputs.backend_services }}'
        FRONTEND_SERVICES_JSON='${{ inputs.frontend_services }}'

        echo "[INFO] - üß© Service detected: $REPO_NAME"
        echo "[INFO] - üîé Checking type..."

        # Parse JSON safely
        BACKEND_SERVICES=$(echo "$BACKEND_SERVICES_JSON" | jq -r '.[]')
        FRONTEND_SERVICES=$(echo "$FRONTEND_SERVICES_JSON" | jq -r '.[]')

        echo "[INFO] - Backend list: $BACKEND_SERVICES"
        echo "[INFO] - Frontend list: $FRONTEND_SERVICES"

        for svc in $BACKEND_SERVICES; do
          if [[ "$svc" == "$REPO_NAME" ]]; then
            echo "service_type=backend" >> $GITHUB_OUTPUT
            echo "[INFO] - ‚öôÔ∏è Type: Backend service"
            exit 0
          fi
        done

        for svc in $FRONTEND_SERVICES; do
          if [[ "$svc" == "$REPO_NAME" ]]; then
            echo "service_type=frontend" >> $GITHUB_OUTPUT
            echo "[INFO] - üñ•Ô∏è Type: Frontend service"
            exit 0
          fi
        done

        echo "service_type=unknown" >> $GITHUB_OUTPUT
        echo "[WARN] - ‚ùì Unknown service type"

    - name: Checkout GitOps Repository
      uses: actions/checkout@v5
      with:
        repository: ${{ inputs.gitops_repo }}
        token: ${{ inputs.git_token }}
        ref: ${{ inputs.git_ref }}
        sparse-checkout: ${{ inputs.metrics_dir }}
        sparse-checkout-cone-mode: false
        fetch-depth: 1

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ inputs.python_version }}

    - name: Update metrics JSON
      id: update-metrics-json
      shell: bash
      env:
        COMMIT_AUTHOR: ${{ inputs.commit_author }}
        COMMIT_MESSAGE: ${{ inputs.commit_message }}
        METRICS_FILE: ${{ inputs.metrics_dir }}/${{ inputs.metrics_file }}
        METRICS_SCRIPT: ${{ inputs.metrics_dir }}/${{ inputs.metrics_script }}
        SERVICE: ${{ inputs.service }}
        SERVICE_TYPE: ${{ steps.service-type.outputs.service_type }}
        STATUS: ${{ inputs.status }}
        DURATION: ${{ inputs.duration }}
        COMMIT_HASH: ${{ github.sha }}
        ACTIONS_URL: ${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{github.run_id }}
        REPOSITORY: ${{ github.event.repository.name }}
        ENVIRONMENT: ${{ inputs.environment }}
        IMAGE_TAG: ${{ inputs.image_tag }} 
      run: |
        SHORT_HASH=$(echo ${COMMIT_HASH::7})

        echo "[INFO] - üß© Service: $SERVICE"
        echo "[INFO] - üß≠ Type: $SERVICE_TYPE"
        echo "[INFO] - üìã Image Tag: $IMAGE_TAG"
        echo "[INFO] - üèõÔ∏è Repository: $REPOSITORY"
        echo "[INFO] - üö¶ Status: $STATUS"
        echo "[INFO] - üë§ Commit Author: $COMMIT_AUTHOR"
        echo "[INFO] - ‚è≥ Commit Hash: $SHORT_HASH"
        echo "[INFO] - üìù Commit Message: $COMMIT_MESSAGE"
        echo "[INFO] - ü§ñ Action URL: $ACTIONS_URL"
        echo "[INFO] - ‚è±Ô∏è Duration: $DURATION"
        echo "[INFO] - üåé Environment: $ENVIRONMENT"
        
        # Run the metrics collector script
        python $METRICS_SCRIPT \
          --environment "$ENVIRONMENT" \
          --service "$SERVICE" \
          --service_type "$SERVICE_TYPE" \
          --status "$STATUS" \
          --duration "$DURATION" \
          --commit_hash "$SHORT_HASH" \
          --actions_url "$ACTIONS_URL" \
          --image_tag "$IMAGE_TAG"
        
        # Export outputs
        echo "METRICS_FILE=$METRICS_FILE" >> $GITHUB_OUTPUT
        echo "METRICS_FILE=$METRICS_FILE" >> $GITHUB_ENV

    - name: Commit and Push Metric
      shell: bash
      id: update-gitops
      env:
        METRICS_FILE: ${{ env.METRICS_FILE }}
      run: |
        # Create directory structure if it doesn't exist
        mkdir -p $(dirname "$METRICS_FILE")
        
        git config user.name "${{ inputs.git_user_name }}"
        git config user.email "${{ inputs.git_user_email }}"
        git add "$METRICS_FILE"

        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "‚úÖ No changes to commit"

          # Export NO_CHANGES to outputs and ENV
          echo "NO_CHANGES=true" >> $GITHUB_ENV
          echo "no-changes=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        git commit -m "deploy(${{ inputs.service }}): update deployment metrics for ${{ inputs.environment }}"

        # Push with enhanced retry logic and better error handling
        max_retries=${{ inputs.git_update_max_retries }}
        
        for i in $(seq 1 $max_retries); do
          if git pull --rebase origin ${{ inputs.git_ref }}; then
            if git push origin ${{ inputs.git_ref }}; then
              echo "‚úÖ Metrics pushed successfully on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Push failed (attempt $i/$max_retries), retrying in 5 seconds..."
              sleep 5
            fi
          else
            echo "::error::Failed to pull and rebase changes from origin/${{ inputs.git_ref }}"
            echo "Please check for merge conflicts or repository permissions."
            exit 1
          fi
          
          if [ $i -eq $max_retries ]; then
            echo "::error::Failed to push changes after $max_retries attempts"
            echo "Please check repository permissions and try again."
            exit 1
          fi
        done

    - name: Update WaaS Dashboard
      id: update-waas-dashboard
      shell: bash
      env:
        COMMIT_AUTHOR: ${{ inputs.commit_author }}
        COMMIT_MESSAGE: ${{ inputs.commit_message }}
        METRICS_FILE: ${{ inputs.metrics_dir }}/${{ inputs.metrics_file }}
        METRICS_SCRIPT: ${{ inputs.metrics_dir }}/${{ inputs.metrics_script }}
        SERVICE: ${{ inputs.service }}
        SERVICE_TYPE: ${{ steps.service-type.outputs.service_type }}
        STATUS: ${{ inputs.status }}
        DURATION: ${{ inputs.duration }}
        COMMIT_HASH: ${{ github.sha }}
        ACTIONS_URL: ${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{github.run_id }}
        REPOSITORY: ${{ github.event.repository.name }}
        ENVIRONMENT: ${{ inputs.environment }}
        IMAGE_TAG: ${{ inputs.image_tag }} 
      run: |
        SHORT_HASH=$(echo ${COMMIT_HASH::7})

        echo "[INFO] - üß© Service: $SERVICE"
        echo "[INFO] - üß≠ Type: $SERVICE_TYPE"
        echo "[INFO] - üìã Image Tag: $IMAGE_TAG"
        echo "[INFO] - üèõÔ∏è Repository: $REPOSITORY"
        echo "[INFO] - üö¶ Status: $STATUS"
        echo "[INFO] - üë§ Commit Author: $COMMIT_AUTHOR"
        echo "[INFO] - ‚è≥ Commit Hash: $SHORT_HASH"
        echo "[INFO] - üìù Commit Message: $COMMIT_MESSAGE"
        echo "[INFO] - ü§ñ Action URL: $ACTIONS_URL"
        echo "[INFO] - ‚è±Ô∏è Duration: $DURATION"
        echo "[INFO] - üåé Environment: $ENVIRONMENT"

        echo "Sending metrics to WaaSdashboard..."

        curl -X POST ${{ inputs.waas_api_url }}/api/deployments \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ inputs.waas_api_key }}" \
            -d '{
                "environment": "$ENVIRONMENT",
                "service": "$SERVICE",
                "service_type": "$SERVICE_TYPE",
                "status": "$STATUS",
                "duration_seconds": $DURATION,
                "commit_hash": "$SHORT_HASH",
                "commit_author": "$COMMIT_AUTHOR",
                "commit_message": "$COMMIT_MESSAGE",
                "actions_url": "$ACTIONS_URL",
                "image_tag": "$IMAGE_TAG",
                "pipeline_id": "${{ github.run_id }}"
                "triggered_by": "$COMMIT_AUTHOR"
            }'